{"categories":[],"posts":[{"content":"This blog post will guide through the process of install Swift for Tensorflow on Ubuntu 18.04 (Local Machine/VM instance) and Start Coding with Swift on the Jupyter Notebook like you do in Python for Tensorflow.\nStep 01: Installing CUDA There are several versions of Swift-TF available to install as you prefer. Namely (on 30th March 2019), CPU only version, CUDA 9.2 version and CUDA 10.0 version. This section is only focused on with CUDA installation. You can skip to the next step if you prefer CPU only installation.   If you have been working on Tensorflow or PyTorch, CUDA might be installed on your ubuntu machine. You can check the installed CUDA version using the below commmand\n(base) vkartz@ubuntu-dl:~$ nvcc --version nvcc: NVIDIA (R) Cuda compiler driver Copyright (c) 2005-2018 NVIDIA Corporation Built on Sat_Aug_25_21:08:01_CDT_2018 Cuda compilation tools, release 10.0, V10.0.130  In my case, CUDA v10.0 is installed on my machine  If you have v9.2 or v10.0 installed, You can go to the next step ðŸ˜ƒ  But sometimes you might get a response like below after executing the above command,\n(base) vkartz@ubuntu-dl:~$ nvcc --version Command 'nvcc' not found, but can be installed with: apt install nvidia-cuda-toolkit Please ask your administrator.   This error have two possibilities:  Your machine have CUDA installed but Environment variable is not set. Your machine do not have CUDA installed.    If Case #1 (Env variable is not set) :  Use the below command to locate your cuda installation on your machine\n(base) vkartz@ubuntu-dl:~$ locate cuda | grep /cuda$ /home/vkartz/anaconda3/pkgs/pytorch-1.0.1-py3.7_cuda10.0.130_cudnn7.4.2_2/lib/python3.7/site-packages/ torch/lib/include/ATen/cuda /home/vkartz/anaconda3/pkgs/pytorch-1.0.1-py3.7_cuda10.0.130_cudnn7.4.2_2/lib/python3.7/site-packages/ torch/lib/include/c10/cuda /home/vkartz/anaconda3/pkgs/pytorch-1.0.1-py3.7_cuda10.0.130_cudnn7.4.2_2/lib/python3.7/site-packages/ torch/lib/include/torch/csrc/cuda /usr/local/cuda /usr/local/cuda-10.0/targets/x86_64-linux/include/thrust/system/cuda  /usr/local/cuda is the installation location of my machine.  After you finding the installed location of CUDA, Then Go to [location]/bin and run the below command\n(base) vkartz@ubuntu-dl:~$ cd /usr/local/cuda/bin/ (base) vkartz@ubuntu-dl:/usr/local/cuda/bin$ ./nvcc --version nvcc: NVIDIA (R) Cuda compiler driver Copyright (c) 2005-2018 NVIDIA Corporation Built on Sat_Aug_25_21:08:01_CDT_2018 Cuda compilation tools, release 10.0, V10.0.130  If this went fine, You can go to the next step ðŸ˜ƒ  If Case #2 (CUDA not installed) :  To install CUDA on your machine properly, Go to Tensorflow CUDA installation GUIDE and follow their instructions on CUDA v10.0 installation. If this went fine, You can go to the next step ðŸ˜ƒ \nStep 02: Installing Swift for Tensorflow You can follow the *Installation Guide on docs to install **but,** *According to my experience during the process, I suggest to follow below Modified steps which will help you in later steps and clean installation.\n Go to your home directory.  (base) vkartz@ubuntu-dl:~$   Run below command to install required dependencies.  (base) vkartz@ubuntu-dl:~$ sudo apt-get install clang libpython-dev libblocksruntime-dev   Visit Swift for Tensorflow Installation page on GitHub to download the latest binary release which is compatible with your CUDA version. Downloaded file looks like _swift-tensorflow-RELEASE-0.2-cuda10.0-cudnn7-ubuntu18.04.tar_ Then create a directory on your home directory called swift-toolchain and extract the downloaded file to that directory. This will create ~/swift-toolchain/usr directory  (base) vkartz@ubuntu-dl:~$ mkdir swift-toolchain (base) vkartz@ubuntu-dl:~$ tar -C swift-toolchain -xzf swift-tensorflow-RELEASE-0.2-cuda10.0-cudnn7-ubuntu18.04.tar.gz   To check whether the installation completed. Go ~/swift-toolchain/usr/bin directory and run ./swift REPL like below.  (base) vkartz@ubuntu-dl:~$ cd ~/swift-toolchain/usr/bin (base) vkartz@ubuntu-dl:~/swift-toolchain/usr/bin$ ./swift Welcome to Swift version 5.0-dev (LLVM dcb9eb74a7, Clang 95cdf7c9af, Swift 434442b530). Type :help for assistance. 1\u0026gt; print(\u0026quot;Hello world\u0026quot;) Hello world 2\u0026gt;  If above steps went fine, You successfully installed swift and you can go to the next step ðŸ˜ƒ \nStep 03: Installing Jupyter-Notebook for Swift In this step I am following Google\u0026rsquo;s swift-jupyter Installation Guide with some Modifications. On the above guide there are several options availble to install Jupyter Notebook for Swift. But I strongly suggest to Install this via Conda.\n Create a new Conda Environment for swift-tensorflow  (base) vkartz@ubuntu-dl:~$ conda create -n swift-tensorflow python==3.6   After Environment creation is completed. Activate the swift-tensorflow environment like below. And Install required packages.  (base) vkartz@ubuntu-dl:~$ conda env list # conda environments: # base * /home/vkartz/anaconda3 swift-tensorflow /home/vkartz/anaconda3/envs/swift-tensorflow (base) vkartz@ubuntu-dl:~$ conda activate swift-tensorflow (swift-tensorflow) vkartz@ubuntu-dl:~$ (swift-tensorflow) vkartz@ubuntu-dl:~$ conda install jupyter numpy matplotlib   Clone the Google Swift Jupyter repository to current directory and go into the repository.  (swift-tensorflow) vkartz@ubuntu-dl:~$ git clone https://github.com/google/swift-jupyter.git (swift-tensorflow) vkartz@ubuntu-dl:~$ cd swift-jupyter (swift-tensorflow) vkartz@ubuntu-dl:~/swift-jupyter$ ls CONTRIBUTING LICENSE parent_kernel.py screenshots test EnableIPythonDisplay.swift README.md register.py swift_kernel.py KernelCommunicator.swift docker requirements.txt swift_shell (swift-tensorflow) vkartz@ubuntu-dl:~/swift-jupyter$  For the next step, you need to find installed locations for Swift toolchain and Python install location for current conda Environment.\n Swift toolchain location:\nIf you follow Step 02 correctly your Swift toolchain location should be ~/swift-toolchain/ Python Installed location for Current Conda Environment:\nRun below command on your terminal to locate the location.  (swift-tensorflow) vkartz@ubuntu-dl:~$ conda info | grep \u0026quot;active env location\u0026quot; active env location : /home/vkartz/anaconda3/envs/swift-tensorflow   Then run python register.py --sys-prefix --swift-toolchain \u0026lt;path swift toolchain directory\u0026gt; --swift-python-library \u0026lt;active env location\u0026gt;/lib/libpython3.6m.so command to register the Swift Kernal. You need to fill \u0026lt;path swift toolchain directory\u0026gt; and \u0026lt;active env location\u0026gt; using above values. Example command as follows,  (swift-tensorflow) vkartz@ubuntu-dl:~/swift-jupyter$ python register.py --sys-prefix --swift-toolchain ~/swift-toolchain/ --swift-python-library ~/anaconda3/envs/swift-tensorflow/lib/libpython3.6m.so  Response should be like below,\nkernel.json: { \u0026quot;argv\u0026quot;: [ \u0026quot;/home/vkartz/anaconda3/envs/swift-tensorflow/bin/python\u0026quot;, \u0026quot;/home/vkartz/swift-jupyter/parent_kernel.py\u0026quot;, \u0026quot;-f\u0026quot;, \u0026quot;{connection_file}\u0026quot; ], \u0026quot;display_name\u0026quot;: \u0026quot;Swift\u0026quot;, \u0026quot;language\u0026quot;: \u0026quot;swift\u0026quot;, \u0026quot;env\u0026quot;: { \u0026quot;PYTHONPATH\u0026quot;: \u0026quot;/home/vkartz/swift-toolchain/usr/lib/python3.6/site-packages\u0026quot;, \u0026quot;LD_LIBRARY_PATH\u0026quot;: \u0026quot;/home/vkartz/swift-toolchain/usr/lib/swift/linux\u0026quot;, \u0026quot;REPL_SWIFT_PATH\u0026quot;: \u0026quot;/home/vkartz/swift-toolchain/usr/bin/repl_swift\u0026quot;, \u0026quot;SWIFT_BUILD_PATH\u0026quot;: \u0026quot;/home/vkartz/swift-toolchain/usr/bin/swift-build\u0026quot;, \u0026quot;PYTHON_LIBRARY\u0026quot;: \u0026quot;/home/vkartz/anaconda3/envs/swift-tensorflow/lib/libpython3.6m.so\u0026quot; } } Registered kernel 'Swift' as 'swift'! (swift-tensorflow) vkartz@ubuntu-dl:~/swift-jupyter$   Now run Jupyter Notebook from your terminal  (swift-tensorflow) vkartz@ubuntu-dl:~$ jupyter-notebook  Now you can open a New Jupyter Notebook as Swift: ","id":0,"section":"posts","summary":"This blog post will guide through the process of install Swift for Tensorflow on Ubuntu 18.04 (Local Machine/VM instance) and Start Coding with Swift on the Jupyter Notebook like you do in Python for Tensorflow.\nStep 01: Installing CUDA There are several versions of Swift-TF available to install as you prefer. Namely (on 30th March 2019), CPU only version, CUDA 9.2 version and CUDA 10.0 version. This section is only focused on with CUDA installation.","tags":["Deep Learning","swift","tensorflow"],"title":"Up and Running with Swift for Tensorflow on Ubuntu 18.04 LTS Bionic Beaver","uri":"https://vibhuthasak.github.io/2019/03/swift-tensorflow-guide/","year":"2019"},{"content":"Welcome Everyone to the journey into Neural Style transfer. Let\u0026rsquo;s dive. ðŸ˜ƒ\nLevel one : Introduction With the rise of Deep Learning technology people invented awesome things using this technology. Neural style transfer (aka Artistic style transfer) is one of the amazing works. It is introduced in 2015 by Gatys et al. I\u0026rsquo;m not going to make you sleepy by discussing details in the paper at this level. Let\u0026rsquo;s talk about the things can be done using the technology. I believe you all like to draw your painting in your favorite artist\u0026rsquo;s style. It not an easy task if you do not have enough skills in painting. Don\u0026rsquo;t worry, Deep Learning have power to reincarnate your favorite artist and make him/her to draw your painting. Looking amazing right?. Let me show you an example. Here is your Image(In literature it is known as Content Image):\nAnd this is your favorite artist\u0026rsquo;s painting(Known as Style Image):\n Now Let\u0026rsquo;s do the Magic âœ¨\n This the Resulted image:\nLooking great right?. Let\u0026rsquo;s move to the level two.\nLevel two : Understanding Concepts From this level onwards you need to have some understanding in How Convolutional Neural Networks work. If you dont have, Don\u0026rsquo;t feel worry here are some resources to learn CNNs.\n Understanding CNN (from cs231n) Convolutional Neural Networks (by Siraj Ravel)  For those who have understood CNN, follow me. Others, follow above links and See you in couple of days ðŸ‘‹\nIn any Neural Network Based model there are three main components. Namely,\n Data. Network Architecture. Loss Function.  Let\u0026rsquo;s understand each components above and how they are related to our topic.\nData For this task we need three inputs. They are,\n Style Image (S_). Content Image (C_). Random Noise (G_).  Both Style Image, Content Image are explained in level one. I hope you understood. Let\u0026rsquo;s talk about Random Noise. In simple words, this is the initialization of the final generated image.\nNetwork architecture For this task we use pre-trained CNN such as VGG-16 / VGG-19.\nLoss Function The loss function for the whole operation is as follows,\n Loss(G) : Total Loss Loss(C,G) : Content Loss Loss(S,G) : Style Loss alpha and beta are hyper parameters  In a simplified way, neural style transfer can be expressed in 2 lines of steps.\n Initialize Generated Image(G) randomly (This is the noise image). Use an optimizer to minimize Loss(G) and update G  Content Loss We will use layer[L] of the CNN to compute the content loss. The layer[L] should be taken layer neither too shallow nor too deep in the neural network. Now we feed both Content Image and Random Noise(Generated Image) into the CNN. We need to get activations of layer[L] for both Images. Let\u0026rsquo;s say, a[C] is the activation of the Content Image and a[G] is the activation of the Generated Image at layer[L]\nif the difference between a[C] and a[G] is smaller, we can say that both Images have similar content. The metric we use to measure the difference is RMSE.\nStyle Loss For Content Loss calculations we used only Layer[L]. But In Style Loss Calculation we use multiple layers. But for now we look at how to calculate Style Loss in one layer(Layer[L]).\nLike above, we need to feed both Style Image and Generated Image into our CNN and get their activations at the Layer[L]. Instead of calculating RMSE directly using those activations, we use something different in this case. That thing is, we are checking how activations are correlated across different channels in Layer[L]. In the literature it is known as Gram Matrix or Style Matrix. We need to calculate Gram Matrix for both Style and Generated Image. Gram Matrix calculation of ith and jth position of channel k in the Layer[L] for style activations is as follows.\ni=(1 to nh), j=(1 to nw) and k=(1 to nc) After calculating Gram Matrix for both Style and Generated image, We use RMSE to calculate the difference at Layer[L]. It is similar what we do in Content Loss.\nFor more visually pleasing results we combine style costs for different layers.\nLayer l = [conv1, conv2, conv3 \u0026hellip;.. ]\nNow we can use following equation to calculate the Total Loss,\nUse your favorite optimizer to minimize the total loss and Update the Noise Image.\nThank you for coming this journey with me. See you in another post. Until then, Happy Learning!! ","id":1,"section":"posts","summary":"Welcome Everyone to the journey into Neural Style transfer. Let\u0026rsquo;s dive. ðŸ˜ƒ\nLevel one : Introduction With the rise of Deep Learning technology people invented awesome things using this technology. Neural style transfer (aka Artistic style transfer) is one of the amazing works. It is introduced in 2015 by Gatys et al. I\u0026rsquo;m not going to make you sleepy by discussing details in the paper at this level. Let\u0026rsquo;s talk about the things can be done using the technology.","tags":["Deep Learning"],"title":"Neural Style Transfer Explained","uri":"https://vibhuthasak.github.io/2018/04/neural_style/","year":"2018"}],"tags":[{"title":"Deep Learning","uri":"https://vibhuthasak.github.io/tags/deep-learning/"},{"title":"swift","uri":"https://vibhuthasak.github.io/tags/swift/"},{"title":"tensorflow","uri":"https://vibhuthasak.github.io/tags/tensorflow/"}]}